name: CI/CD Pipeline

on:
  push:
    branches:
      - working # Trigger on push to the working branch
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/**" # Changed from '.github/workflows/**' to '.github/**'
  pull_request:
    branches:
      - main # Still trigger on PRs to main

jobs:
  lint-and-test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      # Set up Prisma
      - name: Install Prisma CLI
        working-directory: ./backend
        run: npm install -g prisma

      - name: Generate Prisma Client
        working-directory: ./backend
        run: npx prisma generate

      - name: Run database migrations
        working-directory: ./backend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb

      # Run Backend Tests
      - name: Run backend tests
        working-directory: ./backend
        run: npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          NODE_ENV: test

      # Run Super-Linter for backend
      - name: Run Super-Linter
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: working
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FILTER_REGEX_INCLUDE: (backend/.*\.(js|ts|json|md))
          FILTER_REGEX_EXCLUDE: (backend/node_modules/|backend/dist/|backend/build/|\.prisma/|backend/prisma/migrations/)

  lint-and-test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      # Run Frontend Tests
      - name: Run frontend tests
        working-directory: ./frontend
        run:
          npm test

          # Create a custom .eslintrc.json for the super-linter
      - name: Create ESLint config
        run: |
          cat > .github/linters/.eslintrc.json << EOF
          {
            "extends": "standard-with-typescript",
            "parserOptions": {
              "project": "./frontend/tsconfig.json"
            },
            "ignorePatterns": ["**/setupTests.ts", "**/vite-env.d.ts", "**/vite.config.ts", "**/tsconfig.*.json", "node_modules/", "dist/", "build/"]
          }
          EOF

      # Run Super-Linter for frontend
      - name: Run Super-Linter
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: working
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LINTER_RULES_PATH: .github/linters
          TYPESCRIPT_ES_CONFIG_FILE: .eslintrc.json
          FILTER_REGEX_INCLUDE: (frontend/.*\.(js|ts|tsx|jsx|json|css|scss|md))
          FILTER_REGEX_EXCLUDE: (frontend/node_modules/|frontend/dist/|frontend/build/|\.next/|coverage/|frontend/src/setupTests\.ts|frontend/src/vite-env\.d\.ts|frontend/vite\.config\.ts|frontend/tsconfig\.app\.json)
          TYPESCRIPT_DEFAULT_STYLE: ts-standard

  build-backend:
    needs: [lint-and-test-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      # Build backend
      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: backend/dist

  build-frontend:
    needs: [lint-and-test-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      # Build frontend
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist

  auto-promote-to-main:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW_GITHUB_TOKEN }} # Personal access token with repo scope

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Merge working branch to main
        run: |
          git checkout main
          git pull
          git merge --no-ff working -m "Auto-merge working to main [skip ci]"
          git push origin main

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [auto-promote-to-main]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main # Explicitly checkout the main branch after promotion

      - name: Deploy Backend to Render
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [auto-promote-to-main]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main # Explicitly checkout the main branch after promotion

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy Frontend to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          vercel --prod --token="$VERCEL_TOKEN"
